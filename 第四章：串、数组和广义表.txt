串的模式匹配算法：
1.BF算法 ：以两个字符串匹配为例
		S:	a	a	a	a	a	b
		T:	a	a	a	b                          匹配S中字串T的位置
	首先用i来记S中比较的字符的位置，j记T中比较的字符的位置
	开始时i指向S中第一个a，j指向T中第一个a，并开始比较，如果S[i]=T[j],那么就将i，j均向后移动，当移动到第四个的时候发现
	S[i]!=T[j],说明T字符以S中第一个a为开头元素没有匹配成功，那么就将i回溯，将i移动到第二位（i=i-j+2）;j=1
	依次向后移动i，直到i的值距离S串的大小不足T的长度。

时间复杂度O(n*m)

2.KMP算法：


数组矩阵压缩：
1.稀疏矩阵 ：
（一）
	存储时每一个矩阵中的元素都以三元组的数据存储，前两个数值表示横纵位置，第三个值表示元素数值。并且，三元组
的顺序表第一个元素的，三元组的三个值第一个表示原矩阵的长度，第二个表示原矩阵的宽度，第三个值表是非零元素的个数。
（顺序存取时，三元组法对于元素的存取不方便，每次需要遍历才能实现）
	
（二） 稀疏矩阵的链式存储结构：十字链表（能够实现灵活插入和删除元素）
	十字链表中每个结点中有5个数据，row记录行数，col记录列数，value记录非零元素数值，right指针用于记录该元素同一
行下一个非零元素的位置，down用于记录该元素同一列下一个非零元素的位置。除此之外，还有一个行头指针组，这个指针组用
于记录每一行非零元素的地址，同时还有一个列头指针组用于记录每一列首个非零元素的地址。


广义表：
	广义表中的每个元素可以是不同类型的数据，同时元素也可以是子表（广义表作为一个元素）。
	广义表有表头，表头就是广义表的第一个元素；而表尾是除表头外其他元素组成的一个广义表。（表尾不是最后一个元素，
而是一个子表，并且包含除了第一个元素外的其他所有元素）。
	广义表的长度：最外层的元素个数		广义表的深度：将广义表中所有子表展开后，小括号的重数
	空元素的广义表A=（）的深度是1

	基本运算：1.获取广义表表头     2.求广义表表尾




算法实现：串匹配的两种算法：BF、KMP算法






