图：
		定义和术语：G=(V,E)  Graph=(Vertex,Edge)		V:顶点（数据元素）的有穷非空集合	E:边的有穷集合

		无向图：每条边没有方向		有向图：边是有边		完全图：图中的任意两个顶点之间都有边（n*(n-1)/2）

		稀疏图：有很少边或弧的图		稠密图：有较多边或弧的图			网：边/弧带权的图			
		邻接：有边/弧相连的两个顶点之间的关系，存在（vi,vj）则称vi,vj互为邻接点；存在<vi,vj>则称vi邻接到vj,vj邻接于vi.
		关联（依附）：边/弧与顶点之间的关系，存在（vi,vj）/<vi,vj>则称边/弧关联于vi和vj.
		顶点的度：预定点相关联的边的数目。在有向图中，顶点的出度（OD）等于以这个顶点为起始引出的边，顶点的入度			（ID）等于一这个顶点为终端的边。
		路径：接续的边构成的顶点的序列		路径长度：路径上边或弧的数目/权值之和
		回路（环）：第一个顶点和最后一个顶点相同的路径
		简单路径：除了起点和终点可以相同之外，中间经过的边/顶点都不重复的路径
		简单回陆（简单环）：起点和终点相同的简单路径

		连通图：在图中，任意两个顶点间都可以找到一个路径	（当这个图是有向图时，就称为强连通图）
		权和网：带权的图称为网		子图：G1图是G2图的一部分，那么就称G1是G2的子图。
		连通分量：极大连通子图称为连通分量（有向图中称为强连通分量）
		极小连通子图：该子图是图G的子图，在子图中删除任何一条边，子图都不再联通，就称该子图是G的极小连通子图	
		生成树：包含无向图G中所有的顶点，但边的数目有所减少的极小连通子图
		生成森林：对非连通图，由各个连通分量的生成树组成的集合（只有一个连通分量，对应若干生成树）。

	案例实例：
		1.六度空间理论：地球上的任何两个人都可以通过不超过6个人就能彼此认识

	
	图的存储结构：
		1.数组表示法（使用二维数组表示元素间的关系，也称为邻接矩阵）
			不足：空间复杂度大；增删顶点不方便；统计稀疏图中的边的总数时间复杂度大
		2.链式存储结构（1.邻接表	2.邻接多重表	3.十字链表）
		
		一：数组表示法：一.需要一个顶点表，用于存储顶点数据      二.需要一个二维数组，arr[i][j]=1表示（i，j）/<i,j>之间有				边/弧。
			这个二维数组的结果叫邻接矩阵，如果是一个无向图，那么邻接矩阵就会是一个对角线为0，的对称矩阵；完全图中			就会是对角线为0，其他位置全为1的邻接矩阵；计算某顶点的度，只需要读取该顶点所在的行或者列。
		在有向图中，入度和出度值是读取上三角阵或者下三角阵。
		有权图（即网）中，当两个顶点件间有边/弧时，就把arr[i][j]的大小记为权值，如果没有弧就记为无穷大（自定义一个大			数）。

		二：邻接表：（邻接矩阵多用于稠密图，邻接表多用于稀疏图）
			有一个一维数组用于存储顶点元素，区别于数组表示法，数组中顶点元素的存储数据中会多一个头结点，头结点指向		的是一个单向链表，链表中结点的数据包括current index和next index依次记录从该顶点元素出发的所有其他顶点在数组			中的下标志。（在有向图中，找出度容易，找入度难，因此引入了逆邻接表（找入度容易，找出度难））。
		
			不足：节约空间；对有向图便于计算任意顶点的度；对有向图：只能单一计算出度或者入度；不方便检查任意一对顶		点之间是否存在边。
	
		三.十字链表（解决有向图的邻接表中求结点困难，只能单一求出度或者入度的问题）
			相比于邻接表，数组元素增加一个指针域，现在有一个data数据字段，两个指针域，一个指向第一个以该结点为起始		点的出度的终点；一个指向第一个以该结点为终点为入度的起始点；同时每一个链表结点（每一个链表结点实际就是一段			弧的特殊形式）也会增加指针域，现在变成四个，第一个指针域表示弧的起始位置，第二个参数表示弧的终点位置，第三			个指针表示终点位置相同的下一段弧，第四个参数表示起始位置相同的下一段弧。


		四.邻接多重表（解决无向图的邻接表中每条边都要存储两次的问题）
			了改，了改






	图的遍历：

		1.深度优先搜索：（Depth-First Search---DFS）
			总结描述：一条道走到黑，当走到某一个结点，该结点的可行路径均被访问了，那么就回退到上一个可行路径岔口，		继续向下访问，如此，直到回退到最开始的出发点时就表示访问完成。
			（一）.邻接矩阵中算法实现：首先设置辅助数组，用于标记结点的访问情况（1表示已经访问）；递归实现
				效率：时间复杂度O(n^2)     邻接表的方法时间复杂度O(n+e)
				对于非连通图：访问完一个连通分量之后，在未被访问的连通分量中随机选择一个结点再进行DFS即可，直到			把非连通图全部节点访问完成。

		2.广度优先搜索：（Breadth-First Search---BFS）
			思想：从起点开始，先访问该结点的全部邻接点，再按照访问邻接点的先后顺序访问每个邻接点的全部邻接点，依次		全部访问每个结点的全部邻接点。
			算法实现：使用邻接表、队列实现，非递归算法
		
		深度优先和广度优先的空间复杂度都是O(n),时间复杂度与算法没有关系，而只与存储结构有关，邻接矩阵的复杂度是O(n^	2),邻接表的复杂度是O(n+e).




	代码实现：1.createGraph（&G，V，VR）V是顶点集合，VR是边/弧集合，操作结果：构造图
			2.DFSTraverse(G)深度优先遍历		3.BFSTraverse(G)广度优先遍历
			4.数组表示法的实现				5.


	




	图的应用：
		（一）.生成树：可以利用DFS、BFS的访问路径来获得生成树（深度优先生成树、广度优先生成树）。
		最小生成树（Minimun Spanning Tree）MST：权值和最小的生成树
	
		MST性质解释：在生成树的构造过程中，图中的顶点分为两类，一类是已经落在生成树上的顶点集U，一类是未落在生成	树上的顶点集V-U，接下来选择的边用于连接U中顶点和V-U中的的顶点的边应该选取能够连接的边中权值最小的那一条。
		
		算法实现最小生成树：两个经典算法
			（一）.普里姆(Prim)算法：根据MST性质，一个顶点一个顶点向生成树中添加。时间复杂度较大O(n^2),适合稠密图
			  (二).克鲁斯卡尔(Kruskal)算法：直接先将所有顶点放入，但不连线，然后依次选取n-1个权值接近或就是最小的边直	到把n个顶点联通	，如果有成环的话就变动较大权值的边，最终使形成最小生成树。时间复杂度与边相关O(e).


		(二).最短路径：
			1.单源最短路径（一个顶点到所有其他顶点）：Dijkstra（迪杰斯特拉）算法
			2.所有顶点间的最短路径（一个顶点到其他一个顶点）：Floyd（弗洛伊德）算法

		(三).有向无环图及其应用：简称DAG（Directed Acycline Graph）
			分类：1.AOV（Activity On Vertex network）网（用一个有向图表示一个工程的各个子工程及其相互制约的关系，					其中顶点表示活动，弧表示活动之间的优先制约关系）
				 2.AOE网（Activity On Edge）：弧表示活动，顶点表示活动的开始或者结束事件。

			(1).拓扑排序：关于AOV网
				在AOV网没有回路的前提下，将全部的活动排列在一个线性序列中，如果存在<i,j>的弧，那么线性序列中i一				定在j之前。具有这种性质的线性序列叫做拓扑有序序列，实现的算法叫做拓扑排序。

			算法实现：1.先在AOV网中找到一个没有前驱的顶点且输出；2.将该顶点和以该顶点为弧起点（即弧尾）的弧全部删						除；	3.重复以上两个步骤，直到图中无顶点或者不存在没有前驱的的顶点为止。
			
			拓扑排序应用：检测网中是否有回路
				根据拓扑排序，当重复步骤到最后发现图中任有顶点，但找不到一个没有前驱的顶点，因此就证明该图实际是				有回路的。

			
			(2).关键路径：关于AOE网
				示例：晚餐制作，制作晚餐的流程包含，定制菜单、材料准备、材料清洗、餐具准备、烹饪等等工作，这些工			作之间又存在一定的先后关系(一件事的开始要基于另一件事的完成，如买材料就必须基于定制菜单的完成)，并且每个工序		有权重（花费时长），就能够使用AOE网实现，每一个顶点表示事件的开始或者结束(定制菜单的结束也是购买材料的开			始)，最终形成特殊的有向图-AOE网。	
			关键路径：就是事件完成的最短时间，
			确定关键路径：4个描述量：ve:事件vj的最早开始时间	vl：事件vj的最晚发生时间	e：活动ai的最早开始时间							l：表示某活动最晚开始时间
						l-e就是完成某项活动的时间余量
























